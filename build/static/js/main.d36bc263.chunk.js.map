{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","important","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACpB,OACE,6BACE,wBAAIC,UAAU,QAAQF,EAAKG,QACzB,4BAAQC,QAASH,GAAjB,WCQOI,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKJ,UAAU,SACVI,ICQEC,EAfA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,mF,gBCaG,EAhBA,WAEX,OADgBC,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC+E9BK,G,MA7FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GAAY,OAAIT,EAASS,QAChC,IAEH,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAnC,GAAI,OAAIA,EAAKoC,aA+BxBC,EAAqB,SAAAlB,GACzB,IAAMnB,EAAOuB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,eAAQxC,EAAR,CAAcoC,WAAYpC,EAAKoC,YAEhDJ,EACUb,EAAIqB,GACX1B,MAAK,SAAA2B,GACJjB,EAASD,EAAMmB,KAAI,SAAA1C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAOyC,SAEpDE,OAAM,SAAAC,GACLd,EAAgB,SAAD,OACJ9B,EAAKG,QADD,sCAGf0C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpB,KAAOA,UAK1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcb,QAASuB,IAEvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BA7DeO,EAAYQ,KAAI,SAAA1C,GAAI,OACrC,kBAAC,EAAD,CACE8C,IAAK9C,EAAKmB,GACVnB,KAAMA,EACNC,iBAAkB,kBAAMoC,EAAmBrC,EAAKmB,WA4DhD,0BAAM4B,SApDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASsB,EACT0B,MAAM,IAAIC,MAAOC,cACjBjB,UAAWkB,KAAKC,SAAW,GAC3BpC,GAAII,EAAMiC,OAAS,GAGrBxB,EACUkB,GACPpC,MAAK,SAAAE,GACJQ,EAASD,EAAMkC,OAAOzC,IACtBU,EAAW,SAwCX,2BACEgC,MAAOjC,EACPkC,SA3DiB,SAACX,GACxBtB,EAAWsB,EAAMY,OAAOF,UA4DpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,SC3FNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.d36bc263.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  return (\r\n    <div>\r\n      <li className=\"note\">{note.content}\r\n        <button onClick={toggleImportance}>Imp.</button>\r\n      </li>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    \r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, property of marco henriques burman esq.</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios';\r\n\r\n/*\r\nuse http://localhost:3001/notes for using own server\r\nuse fixed url https://protected-island-73178.herokuapp.com/notes/2 to hook up with Heroku back-end\r\nuse relative link api/notes if frontend and backend are at the same address in Heroku\r\n*/\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n// Shorthand property names (ES2015)\r\nexport default { getAll, create, update }\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport noteService from './services/notes'\r\nimport './index.css'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]) \r\n  const [newNote, setNewNote] = useState('') \r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }, [])\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  )\r\n  \r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(data => {\r\n        setNotes(notes.concat(data))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote} \r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'  \r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}